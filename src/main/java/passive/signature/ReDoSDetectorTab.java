package passive.signature;

import extension.helpers.StringUtil;
import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.Toolkit;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.util.EnumSet;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.WindowConstants;
import redoscheckr.DetectIssue;
import redoscheckr.ReDoSOption;
import redoscheckr.ReDosDetector;

/**
 *
 * @author isayan
 */
public class ReDoSDetectorTab extends javax.swing.JPanel {

    private final static Logger logger = Logger.getLogger(ReDoSDetectorTab.class.getName());

    /**
     * Creates new form ReDoSDetectorTab
     */
    public ReDoSDetectorTab() {
        initComponents();
        customizeComponents();
    }

    private void customizeComponents() {
        this.cmbAccelerationModeType.setModel(new javax.swing.DefaultComboBoxModel(new String[]{ReDoSOption.AccelerationModeType.AUTO.name(), ReDoSOption.AccelerationModeType.ON.name(), ReDoSOption.AccelerationModeType.OFF.name()}));
        this.cmbCheckerType.setModel(new javax.swing.DefaultComboBoxModel(new String[]{ReDoSOption.CheckerType.AUTO.name(), ReDoSOption.CheckerType.AUTOMATON.name(), ReDoSOption.CheckerType.FUZZ.name()}));
        this.cmbSenderType.setModel(new javax.swing.DefaultComboBoxModel(new String[]{ReDoSOption.SeederType.STATIC.name(), ReDoSOption.SeederType.DYNAMIC.name()}));
        this.cmbLoggerType.setModel(new javax.swing.DefaultComboBoxModel(new String[]{ReDoSOption.LoggerType.ON.name(), ReDoSOption.LoggerType.OFF.name()}));

        this.cmbAccelerationModeType.addFocusListener(FIRE_FOCUS);
        this.spnAttackLimit.addFocusListener(FIRE_FOCUS);
        this.spnAttackTimeout.addFocusListener(FIRE_FOCUS);
        this.cmbCheckerType.addFocusListener(FIRE_FOCUS);
        this.spnCrossoverSize.addFocusListener(FIRE_FOCUS);
        this.spnHeatRatio.addFocusListener(FIRE_FOCUS);
        this.spnIncubationLimit.addFocusListener(FIRE_FOCUS);
        this.spnIncubationTimeout.addFocusListener(FIRE_FOCUS);
        this.cmbLoggerType.addFocusListener(FIRE_FOCUS);
        this.spnMaxAttackStringSize.addFocusListener(FIRE_FOCUS);
        this.spnMaxDegree.addFocusListener(FIRE_FOCUS);
        this.spnMaxGeneStringSize.addFocusListener(FIRE_FOCUS);
        this.spnMaxGenerationSize.addFocusListener(FIRE_FOCUS);
        this.spnMaxInitialGenerationSize.addFocusListener(FIRE_FOCUS);
        this.spnMaxIteration.addFocusListener(FIRE_FOCUS);
        this.spnMaxNFASize.addFocusListener(FIRE_FOCUS);
        this.spnMaxPatternSize.addFocusListener(FIRE_FOCUS);
        this.spnMaxRecallStringSize.addFocusListener(FIRE_FOCUS);
        this.spnMaxRepeatCount.addFocusListener(FIRE_FOCUS);
        this.spnMaxSimpleRepeatCount.addFocusListener(FIRE_FOCUS);
        this.spnMutationSize.addFocusListener(FIRE_FOCUS);
        this.spnRandomSeed.addFocusListener(FIRE_FOCUS);
        this.spnRecallLimit.addFocusListener(FIRE_FOCUS);
        this.spnRecallTimeout.addFocusListener(FIRE_FOCUS);
        this.cmbSenderType.addFocusListener(FIRE_FOCUS);
        this.spnSeedingLimit.addFocusListener(FIRE_FOCUS);
        this.spnSeedingTimeout.addFocusListener(FIRE_FOCUS);
        this.spnTimeout.addFocusListener(FIRE_FOCUS);

        this.txtIssueText.setFocusable(false);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabbetScan = new javax.swing.JTabbedPane();
        pnlScan = new javax.swing.JPanel();
        pnlResult = new javax.swing.JPanel();
        pnlOptional = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtIssueText = new javax.swing.JEditorPane();
        pnlHeader = new javax.swing.JPanel();
        txtReDoS = new javax.swing.JTextField();
        btnCheck = new javax.swing.JButton();
        chkGlobal = new javax.swing.JCheckBox();
        chkDotAll = new javax.swing.JCheckBox();
        chkMultiline = new javax.swing.JCheckBox();
        chkHasIndices = new javax.swing.JCheckBox();
        chkIgnoreCase = new javax.swing.JCheckBox();
        chkUnicodeSets = new javax.swing.JCheckBox();
        chkUnicode = new javax.swing.JCheckBox();
        chkSticky = new javax.swing.JCheckBox();
        scrollOption = new javax.swing.JScrollPane();
        pnlOption = new javax.swing.JPanel();
        lblAccelerationModeType = new javax.swing.JLabel();
        cmbAccelerationModeType = new javax.swing.JComboBox<>();
        lblAttackLimit = new javax.swing.JLabel();
        spnAttackTimeout = new javax.swing.JSpinner();
        lblAttackTimeout = new javax.swing.JLabel();
        spnAttackLimit = new javax.swing.JSpinner();
        lblCheckerType = new javax.swing.JLabel();
        cmbCheckerType = new javax.swing.JComboBox<>();
        lblCrossoverSize = new javax.swing.JLabel();
        spnCrossoverSize = new javax.swing.JSpinner();
        lblCrossoverSize1 = new javax.swing.JLabel();
        spnHeatRatio = new javax.swing.JSpinner();
        lblCrossoverSize2 = new javax.swing.JLabel();
        spnIncubationLimit = new javax.swing.JSpinner();
        lblCrossoverSize3 = new javax.swing.JLabel();
        spnIncubationTimeout = new javax.swing.JSpinner();
        lblMaxDegree = new javax.swing.JLabel();
        spnMaxDegree = new javax.swing.JSpinner();
        lblMaxDegree1 = new javax.swing.JLabel();
        spnMaxGeneStringSize = new javax.swing.JSpinner();
        lblMaxGenerationSize = new javax.swing.JLabel();
        spnMaxGenerationSize = new javax.swing.JSpinner();
        lblMaxInitialGenerationSize = new javax.swing.JLabel();
        spnMaxInitialGenerationSize = new javax.swing.JSpinner();
        lblMaxIteration = new javax.swing.JLabel();
        spnMaxIteration = new javax.swing.JSpinner();
        lblMaxNFASize = new javax.swing.JLabel();
        spnMaxNFASize = new javax.swing.JSpinner();
        lblMaxNFASize1 = new javax.swing.JLabel();
        spnMaxPatternSize = new javax.swing.JSpinner();
        lblMaxRepeatCount = new javax.swing.JLabel();
        spnMaxRepeatCount = new javax.swing.JSpinner();
        lblMutationSize = new javax.swing.JLabel();
        spnMutationSize = new javax.swing.JSpinner();
        lblRandomSeed = new javax.swing.JLabel();
        spnRandomSeed = new javax.swing.JSpinner();
        lblRecallLimit = new javax.swing.JLabel();
        spnRecallLimit = new javax.swing.JSpinner();
        lblRecallTimeout = new javax.swing.JLabel();
        spnRecallTimeout = new javax.swing.JSpinner();
        lblSeederType = new javax.swing.JLabel();
        cmbSenderType = new javax.swing.JComboBox<>();
        lblSeedingTimeout = new javax.swing.JLabel();
        spnSeedingTimeout = new javax.swing.JSpinner();
        lblTimeout = new javax.swing.JLabel();
        spnTimeout = new javax.swing.JSpinner();
        spnMaxAttackStringSize = new javax.swing.JSpinner();
        lblMaxDegree2 = new javax.swing.JLabel();
        lblMaxRecallStringSize = new javax.swing.JLabel();
        spnMaxRecallStringSize = new javax.swing.JSpinner();
        lblMaxSimpleRepeatCount = new javax.swing.JLabel();
        spnMaxSimpleRepeatCount = new javax.swing.JSpinner();
        lblSeedingLimit = new javax.swing.JLabel();
        spnSeedingLimit = new javax.swing.JSpinner();
        cmbLoggerType = new javax.swing.JComboBox<>();
        lblLoggerType = new javax.swing.JLabel();
        btnDefaut = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout());

        pnlScan.setLayout(new java.awt.BorderLayout());

        pnlResult.setBorder(javax.swing.BorderFactory.createTitledBorder("Result"));
        pnlResult.setLayout(new java.awt.BorderLayout());

        pnlOptional.setLayout(new java.awt.BorderLayout());

        txtIssueText.setEditable(false);
        txtIssueText.setContentType("text/html"); // NOI18N
        txtIssueText.setText("");
        txtIssueText.setToolTipText("");
        jScrollPane1.setViewportView(txtIssueText);

        pnlOptional.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        pnlResult.add(pnlOptional, java.awt.BorderLayout.CENTER);

        pnlScan.add(pnlResult, java.awt.BorderLayout.CENTER);

        btnCheck.setText("Check");
        btnCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckActionPerformed(evt);
            }
        });

        chkGlobal.setMnemonic('g');
        chkGlobal.setText("global(g)");
        chkGlobal.setToolTipText("Global search.");
        chkGlobal.setActionCommand("global");

        chkDotAll.setMnemonic('s');
        chkDotAll.setText("dotAll(s)");
        chkDotAll.setToolTipText("Allows . to match newline characters.");
        chkDotAll.setActionCommand("dotAll");

        chkMultiline.setMnemonic('m');
        chkMultiline.setText("multiline(m)");
        chkMultiline.setToolTipText("Allows ^ and $ to match next to newline characters.");
        chkMultiline.setActionCommand("multiline");

        chkHasIndices.setMnemonic('d');
        chkHasIndices.setText("hasIndices(d)");
        chkHasIndices.setToolTipText("Generate indices for substring matches.");
        chkHasIndices.setActionCommand("hasIndices");
        chkHasIndices.setEnabled(false);

        chkIgnoreCase.setMnemonic('i');
        chkIgnoreCase.setText("IgnoreCase(i)");
        chkIgnoreCase.setToolTipText("Case-insensitive search.");
        chkIgnoreCase.setActionCommand("IgnoreCase");

        chkUnicodeSets.setMnemonic(' ');
        chkUnicodeSets.setText("unicodeSets(v)");
        chkUnicodeSets.setToolTipText("An upgrade to the u mode with more Unicode features.");
        chkUnicodeSets.setActionCommand("unicodeSets");
        chkUnicodeSets.setEnabled(false);

        chkUnicode.setMnemonic('u');
        chkUnicode.setText("unicode(u)");
        chkUnicode.setToolTipText("\"Unicode\"; treat a pattern as a sequence of Unicode code points.");
        chkUnicode.setActionCommand("unicode");

        chkSticky.setMnemonic('y');
        chkSticky.setText("sticky(y)");
        chkSticky.setToolTipText("Perform a \"sticky\" search that matches starting at the current position in the target string.");
        chkSticky.setActionCommand("sticky");

        javax.swing.GroupLayout pnlHeaderLayout = new javax.swing.GroupLayout(pnlHeader);
        pnlHeader.setLayout(pnlHeaderLayout);
        pnlHeaderLayout.setHorizontalGroup(
            pnlHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlHeaderLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlHeaderLayout.createSequentialGroup()
                        .addComponent(txtReDoS, javax.swing.GroupLayout.PREFERRED_SIZE, 624, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCheck))
                    .addGroup(pnlHeaderLayout.createSequentialGroup()
                        .addComponent(chkGlobal)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chkIgnoreCase)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chkMultiline)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chkDotAll)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chkUnicode)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chkSticky)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chkUnicodeSets)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chkHasIndices)))
                .addGap(218, 218, 218))
        );
        pnlHeaderLayout.setVerticalGroup(
            pnlHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlHeaderLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtReDoS, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCheck))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnlHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chkGlobal, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(chkIgnoreCase, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(chkMultiline, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(chkDotAll, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(chkUnicode, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(chkSticky)
                        .addComponent(chkUnicodeSets)
                        .addComponent(chkHasIndices)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        chkGlobal.getAccessibleContext().setAccessibleName("global(&g)");

        pnlScan.add(pnlHeader, java.awt.BorderLayout.NORTH);

        tabbetScan.addTab("Scan", pnlScan);

        lblAccelerationModeType.setText("Acceleration Mode:");

        lblAttackLimit.setText("Attack Limit:");

        spnAttackTimeout.setModel(new javax.swing.SpinnerNumberModel());

        lblAttackTimeout.setText("Attack Timeout (ms):");

        spnAttackLimit.setModel(new javax.swing.SpinnerNumberModel());

        lblCheckerType.setText("Checker:");

        lblCrossoverSize.setText("Crossover Size:");

        spnCrossoverSize.setModel(new javax.swing.SpinnerNumberModel());

        lblCrossoverSize1.setText("Heat Ratio:");

        spnHeatRatio.setModel(new javax.swing.SpinnerNumberModel(0.0d, null, null, 1.0d));

        lblCrossoverSize2.setText("Incubation Limit:");

        spnIncubationLimit.setModel(new javax.swing.SpinnerNumberModel());

        lblCrossoverSize3.setText("Incubation Timeout (ms):");

        spnIncubationTimeout.setModel(new javax.swing.SpinnerNumberModel());

        lblMaxDegree.setText("Max Degree:");

        spnMaxDegree.setModel(new javax.swing.SpinnerNumberModel());

        lblMaxDegree1.setText("Max Gene String Size:");

        spnMaxGeneStringSize.setModel(new javax.swing.SpinnerNumberModel());

        lblMaxGenerationSize.setText("Max Generation Size:");

        spnMaxGenerationSize.setModel(new javax.swing.SpinnerNumberModel());

        lblMaxInitialGenerationSize.setText("Max Initial Generation Size:");

        spnMaxInitialGenerationSize.setModel(new javax.swing.SpinnerNumberModel());

        lblMaxIteration.setText("Max Iteration:");

        spnMaxIteration.setModel(new javax.swing.SpinnerNumberModel());

        lblMaxNFASize.setText("Max NFA Size:");

        spnMaxNFASize.setModel(new javax.swing.SpinnerNumberModel());

        lblMaxNFASize1.setText("Max Pattern Size:");

        spnMaxPatternSize.setModel(new javax.swing.SpinnerNumberModel());

        lblMaxRepeatCount.setText("Max Repeat Count:");

        spnMaxRepeatCount.setModel(new javax.swing.SpinnerNumberModel());

        lblMutationSize.setText("Mutation Size:");

        spnMutationSize.setModel(new javax.swing.SpinnerNumberModel());

        lblRandomSeed.setText("Random Seed:");

        spnRandomSeed.setModel(new javax.swing.SpinnerNumberModel(0L, null, null, 1L));

        lblRecallLimit.setText("Recall Limit:");

        spnRecallLimit.setModel(new javax.swing.SpinnerNumberModel());

        lblRecallTimeout.setText("Recall Timeout (ms):");

        spnRecallTimeout.setModel(new javax.swing.SpinnerNumberModel());

        lblSeederType.setText("Seeder:");

        lblSeedingTimeout.setText("Seeding Timeout (ms):");

        spnSeedingTimeout.setModel(new javax.swing.SpinnerNumberModel());

        lblTimeout.setText("Timeout (ms):");

        spnTimeout.setModel(new javax.swing.SpinnerNumberModel());

        spnMaxAttackStringSize.setModel(new javax.swing.SpinnerNumberModel());

        lblMaxDegree2.setText("Max Attack String Size:");

        lblMaxRecallStringSize.setText("Max Recall String Size:");

        spnMaxRecallStringSize.setModel(new javax.swing.SpinnerNumberModel());

        lblMaxSimpleRepeatCount.setText("Max Simple Repeat Count:");

        spnMaxSimpleRepeatCount.setModel(new javax.swing.SpinnerNumberModel());

        lblSeedingLimit.setText("Seeding Limit:");

        spnSeedingLimit.setModel(new javax.swing.SpinnerNumberModel());

        cmbLoggerType.setEnabled(false);

        lblLoggerType.setText("Logger:");

        btnDefaut.setText("Defaut");
        btnDefaut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDefautActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlOptionLayout = new javax.swing.GroupLayout(pnlOption);
        pnlOption.setLayout(pnlOptionLayout);
        pnlOptionLayout.setHorizontalGroup(
            pnlOptionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlOptionLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlOptionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlOptionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(lblMaxInitialGenerationSize)
                        .addGroup(pnlOptionLayout.createSequentialGroup()
                            .addComponent(lblSeedingTimeout)
                            .addGap(27, 27, 27)))
                    .addComponent(lblMaxGenerationSize)
                    .addComponent(lblMaxDegree1)
                    .addComponent(lblMaxDegree)
                    .addComponent(lblCrossoverSize3)
                    .addComponent(lblCrossoverSize2)
                    .addComponent(lblCrossoverSize1)
                    .addComponent(lblCrossoverSize)
                    .addComponent(lblAttackTimeout)
                    .addComponent(lblAttackLimit)
                    .addComponent(lblAccelerationModeType)
                    .addComponent(lblTimeout)
                    .addComponent(lblLoggerType)
                    .addComponent(lblCheckerType)
                    .addComponent(lblMaxDegree2)
                    .addComponent(lblMaxIteration)
                    .addComponent(lblMaxNFASize)
                    .addComponent(lblMaxNFASize1)
                    .addComponent(lblMaxRecallStringSize)
                    .addComponent(lblMaxRepeatCount)
                    .addComponent(lblMaxSimpleRepeatCount)
                    .addComponent(lblMutationSize)
                    .addComponent(lblRandomSeed)
                    .addComponent(lblRecallLimit)
                    .addComponent(lblRecallTimeout)
                    .addComponent(lblSeederType)
                    .addComponent(lblSeedingLimit))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlOptionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(spnSeedingTimeout, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spnSeedingLimit, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbSenderType, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spnRecallTimeout, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spnRecallLimit, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spnRandomSeed, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spnMutationSize, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spnMaxSimpleRepeatCount, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spnMaxRepeatCount, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spnMaxRecallStringSize, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spnMaxPatternSize, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spnMaxNFASize, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spnMaxIteration, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spnMaxInitialGenerationSize, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spnMaxGenerationSize, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spnMaxGeneStringSize, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spnMaxDegree, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spnMaxAttackStringSize, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spnIncubationTimeout, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spnIncubationLimit, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spnHeatRatio, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spnCrossoverSize, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spnAttackTimeout, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spnAttackLimit, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbAccelerationModeType, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spnTimeout, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbLoggerType, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnlOptionLayout.createSequentialGroup()
                        .addComponent(cmbCheckerType, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDefaut, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(456, Short.MAX_VALUE))
        );
        pnlOptionLayout.setVerticalGroup(
            pnlOptionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlOptionLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlOptionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCheckerType)
                    .addComponent(cmbCheckerType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDefaut))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlOptionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblLoggerType)
                    .addComponent(cmbLoggerType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlOptionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spnTimeout, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTimeout))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlOptionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAccelerationModeType)
                    .addComponent(cmbAccelerationModeType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlOptionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spnAttackLimit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblAttackLimit))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlOptionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblAttackTimeout, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(spnAttackTimeout, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlOptionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblCrossoverSize, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(spnCrossoverSize, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlOptionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCrossoverSize1)
                    .addComponent(spnHeatRatio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlOptionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCrossoverSize2)
                    .addComponent(spnIncubationLimit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlOptionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCrossoverSize3)
                    .addComponent(spnIncubationTimeout, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlOptionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblMaxDegree2)
                    .addComponent(spnMaxAttackStringSize))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlOptionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblMaxDegree)
                    .addComponent(spnMaxDegree, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlOptionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spnMaxGeneStringSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblMaxDegree1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlOptionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblMaxGenerationSize)
                    .addComponent(spnMaxGenerationSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlOptionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblMaxInitialGenerationSize)
                    .addComponent(spnMaxInitialGenerationSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlOptionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblMaxIteration)
                    .addComponent(spnMaxIteration, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlOptionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblMaxNFASize)
                    .addComponent(spnMaxNFASize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlOptionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblMaxNFASize1)
                    .addComponent(spnMaxPatternSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlOptionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblMaxRecallStringSize)
                    .addComponent(spnMaxRecallStringSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlOptionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblMaxRepeatCount)
                    .addComponent(spnMaxRepeatCount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlOptionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblMaxSimpleRepeatCount)
                    .addComponent(spnMaxSimpleRepeatCount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlOptionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblMutationSize)
                    .addComponent(spnMutationSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlOptionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlOptionLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(lblRandomSeed))
                    .addComponent(spnRandomSeed, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlOptionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spnRecallLimit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblRecallLimit))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlOptionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spnRecallTimeout, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblRecallTimeout))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlOptionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbSenderType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSeederType))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlOptionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spnSeedingLimit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSeedingLimit))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlOptionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spnSeedingTimeout, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSeedingTimeout))
                .addGap(170, 170, 170))
        );

        scrollOption.setViewportView(pnlOption);

        tabbetScan.addTab("Advance Optoin", scrollOption);

        add(tabbetScan, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    final FocusListener FIRE_FOCUS = new FocusListener() {
        @Override
        public void focusGained(FocusEvent e) {
        }

        @Override
        public void focusLost(FocusEvent e) {
            firePropertyChange(ReDoSScan.SIGNATURE_PROPERTY, null, getOption());
        }
    };

    private final ReDosDetector detect = new ReDosDetector();

    private void btnCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckActionPerformed
        String flags = ReDoSOption.RegexFlag.toFlags(this.getFlags());
        DetectIssue issue = this.detect.scan(this.getRegex(), flags, this.getOption());
        this.txtIssueText.setText(ReDoSScan.toDetectIssueLabel(issue, true));
    }//GEN-LAST:event_btnCheckActionPerformed

    private void btnDefautActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDefautActionPerformed
        ReDoSOption option = new ReDoSOption();
        this.setOption(option);
        firePropertyChange(ReDoSScan.SIGNATURE_PROPERTY, null, getOption());
    }//GEN-LAST:event_btnDefautActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCheck;
    private javax.swing.JButton btnDefaut;
    private javax.swing.JCheckBox chkDotAll;
    private javax.swing.JCheckBox chkGlobal;
    private javax.swing.JCheckBox chkHasIndices;
    private javax.swing.JCheckBox chkIgnoreCase;
    private javax.swing.JCheckBox chkMultiline;
    private javax.swing.JCheckBox chkSticky;
    private javax.swing.JCheckBox chkUnicode;
    private javax.swing.JCheckBox chkUnicodeSets;
    private javax.swing.JComboBox<String> cmbAccelerationModeType;
    private javax.swing.JComboBox<String> cmbCheckerType;
    private javax.swing.JComboBox<String> cmbLoggerType;
    private javax.swing.JComboBox<String> cmbSenderType;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblAccelerationModeType;
    private javax.swing.JLabel lblAttackLimit;
    private javax.swing.JLabel lblAttackTimeout;
    private javax.swing.JLabel lblCheckerType;
    private javax.swing.JLabel lblCrossoverSize;
    private javax.swing.JLabel lblCrossoverSize1;
    private javax.swing.JLabel lblCrossoverSize2;
    private javax.swing.JLabel lblCrossoverSize3;
    private javax.swing.JLabel lblLoggerType;
    private javax.swing.JLabel lblMaxDegree;
    private javax.swing.JLabel lblMaxDegree1;
    private javax.swing.JLabel lblMaxDegree2;
    private javax.swing.JLabel lblMaxGenerationSize;
    private javax.swing.JLabel lblMaxInitialGenerationSize;
    private javax.swing.JLabel lblMaxIteration;
    private javax.swing.JLabel lblMaxNFASize;
    private javax.swing.JLabel lblMaxNFASize1;
    private javax.swing.JLabel lblMaxRecallStringSize;
    private javax.swing.JLabel lblMaxRepeatCount;
    private javax.swing.JLabel lblMaxSimpleRepeatCount;
    private javax.swing.JLabel lblMutationSize;
    private javax.swing.JLabel lblRandomSeed;
    private javax.swing.JLabel lblRecallLimit;
    private javax.swing.JLabel lblRecallTimeout;
    private javax.swing.JLabel lblSeederType;
    private javax.swing.JLabel lblSeedingLimit;
    private javax.swing.JLabel lblSeedingTimeout;
    private javax.swing.JLabel lblTimeout;
    private javax.swing.JPanel pnlHeader;
    private javax.swing.JPanel pnlOption;
    private javax.swing.JPanel pnlOptional;
    private javax.swing.JPanel pnlResult;
    private javax.swing.JPanel pnlScan;
    private javax.swing.JScrollPane scrollOption;
    private javax.swing.JSpinner spnAttackLimit;
    private javax.swing.JSpinner spnAttackTimeout;
    private javax.swing.JSpinner spnCrossoverSize;
    private javax.swing.JSpinner spnHeatRatio;
    private javax.swing.JSpinner spnIncubationLimit;
    private javax.swing.JSpinner spnIncubationTimeout;
    private javax.swing.JSpinner spnMaxAttackStringSize;
    private javax.swing.JSpinner spnMaxDegree;
    private javax.swing.JSpinner spnMaxGeneStringSize;
    private javax.swing.JSpinner spnMaxGenerationSize;
    private javax.swing.JSpinner spnMaxInitialGenerationSize;
    private javax.swing.JSpinner spnMaxIteration;
    private javax.swing.JSpinner spnMaxNFASize;
    private javax.swing.JSpinner spnMaxPatternSize;
    private javax.swing.JSpinner spnMaxRecallStringSize;
    private javax.swing.JSpinner spnMaxRepeatCount;
    private javax.swing.JSpinner spnMaxSimpleRepeatCount;
    private javax.swing.JSpinner spnMutationSize;
    private javax.swing.JSpinner spnRandomSeed;
    private javax.swing.JSpinner spnRecallLimit;
    private javax.swing.JSpinner spnRecallTimeout;
    private javax.swing.JSpinner spnSeedingLimit;
    private javax.swing.JSpinner spnSeedingTimeout;
    private javax.swing.JSpinner spnTimeout;
    private javax.swing.JTabbedPane tabbetScan;
    private javax.swing.JEditorPane txtIssueText;
    private javax.swing.JTextField txtReDoS;
    // End of variables declaration//GEN-END:variables

    public String getRegex() {
        return this.txtReDoS.getText();
    }

    public EnumSet<ReDoSOption.RegexFlag> getFlags() {
        EnumSet<ReDoSOption.RegexFlag> flags = EnumSet.noneOf(ReDoSOption.RegexFlag.class);
        if (this.chkHasIndices.isSelected()) {
            flags.add(ReDoSOption.RegexFlag.HAS_INDICES);
        }
        if (this.chkGlobal.isSelected()) {
            flags.add(ReDoSOption.RegexFlag.GLOBAL);
        }
        if (this.chkIgnoreCase.isSelected()) {
            flags.add(ReDoSOption.RegexFlag.IGNORE_CASE);
        }
        if (this.chkMultiline.isSelected()) {
            flags.add(ReDoSOption.RegexFlag.MULTILINE);
        }
        if (this.chkDotAll.isSelected()) {
            flags.add(ReDoSOption.RegexFlag.DOTALL);
        }
        if (this.chkUnicode.isSelected()) {
            flags.add(ReDoSOption.RegexFlag.UNICODE);
        }
        if (this.chkUnicodeSets.isSelected()) {
            flags.add(ReDoSOption.RegexFlag.UNICODE_SETS);
        }
        if (this.chkSticky.isSelected()) {
            flags.add(ReDoSOption.RegexFlag.STICKY);
        }
        return flags;
    }

    public ReDoSOption getOption() {
        final ReDoSOption option = new ReDoSOption();
        option.setAccelerationMode(ReDoSOption.AccelerationModeType.valueOf(StringUtil.toString(this.cmbAccelerationModeType.getSelectedItem())));
        option.setAttackLimit((int) this.spnAttackLimit.getValue());
        option.setAttackTimeout((int) this.spnAttackTimeout.getValue());
        option.setChecker(ReDoSOption.CheckerType.valueOf(StringUtil.toString(this.cmbCheckerType.getSelectedItem())));
        option.setCrossoverSize((int) this.spnCrossoverSize.getValue());
        option.setHeatRatio((double) this.spnHeatRatio.getValue());
        option.setIncubationLimit((int) this.spnIncubationLimit.getValue());
        option.setIncubationTimeout((int) this.spnIncubationTimeout.getValue());
        option.setLogger(ReDoSOption.LoggerType.valueOf(StringUtil.toString(this.cmbLoggerType.getSelectedItem())));
        option.setMaxAttackStringSize((int) this.spnMaxAttackStringSize.getValue());
        option.setMaxDegree((int) this.spnMaxDegree.getValue());
        option.setMaxGeneStringSize((int) this.spnMaxGeneStringSize.getValue());
        option.setMaxGenerationSize((int) this.spnMaxGenerationSize.getValue());
        option.setMaxInitialGenerationSize((int) this.spnMaxInitialGenerationSize.getValue());
        option.setMaxIteration((int) this.spnMaxIteration.getValue());
        option.setMaxNFASize((int) this.spnMaxNFASize.getValue());
        option.setMaxPatternSize((int) this.spnMaxPatternSize.getValue());
        option.setMaxRecallStringSize((int) this.spnMaxRecallStringSize.getValue());
        option.setMaxRepeatCount((int) this.spnMaxRepeatCount.getValue());
        option.setMaxSimpleRepeatCount((int) this.spnMaxSimpleRepeatCount.getValue());
        option.setMutationSize((int) this.spnMutationSize.getValue());
        option.setRandomSeed((long) this.spnRandomSeed.getValue());
        option.setRecallLimit((int) this.spnRecallLimit.getValue());
        option.setRecallTimeout((int) this.spnRecallTimeout.getValue());
        option.setSeeder(ReDoSOption.SeederType.valueOf(StringUtil.toString(this.cmbSenderType.getSelectedItem())));
        option.setSeedingLimit((int) this.spnSeedingLimit.getValue());
        option.setSeedingTimeout((int) this.spnSeedingTimeout.getValue());
        option.setTimeout((int) this.spnTimeout.getValue());
        return option;
    }

    public void setOption(ReDoSOption option) {
        this.cmbAccelerationModeType.setSelectedItem(option.getAccelerationMode().name());
        this.spnAttackLimit.setValue(option.getAttackLimit());
        this.spnAttackTimeout.setValue(option.getAttackTimeout());
        this.cmbCheckerType.setSelectedItem(option.getChecker().name());
        this.spnCrossoverSize.setValue(option.getCrossoverSize());
        this.spnHeatRatio.setValue(option.getHeatRatio());
        this.spnIncubationLimit.setValue(option.getIncubationLimit());
        this.spnIncubationTimeout.setValue(option.getIncubationTimeout());
        this.cmbLoggerType.setSelectedItem(option.getLogger().name());
        this.spnMaxAttackStringSize.setValue(option.getMaxAttackStringSize());
        this.spnMaxDegree.setValue(option.getMaxDegree());
        this.spnMaxGeneStringSize.setValue(option.getMaxGeneStringSize());
        this.spnMaxGenerationSize.setValue(option.getMaxGenerationSize());
        this.spnMaxInitialGenerationSize.setValue(option.getMaxInitialGenerationSize());
        this.spnMaxIteration.setValue(option.getMaxIteration());
        this.spnMaxNFASize.setValue(option.getMaxNFASize());
        this.spnMaxPatternSize.setValue(option.getMaxPatternSize());
        this.spnMaxRecallStringSize.setValue(option.getMaxRecallStringSize());
        this.spnMaxRepeatCount.setValue(option.getMaxRepeatCount());
        this.spnMaxSimpleRepeatCount.setValue(option.getMaxSimpleRepeatCount());
        this.spnMutationSize.setValue(option.getMutationSize());
        this.spnRandomSeed.setValue(option.getRandomSeed());
        this.spnRecallLimit.setValue(option.getRecallLimit());
        this.spnRecallTimeout.setValue(option.getRecallTimeout());
        this.cmbSenderType.setSelectedItem(option.getSeeder().name());
        this.spnSeedingLimit.setValue(option.getSeedingLimit());
        this.spnSeedingTimeout.setValue(option.getSeedingTimeout());
        this.spnTimeout.setValue(option.getTimeout());
    }

    public static void main(String[] args) {
        EventQueue.invokeLater(MainPanel::createAndShowGui);
    }

    final static class MainPanel extends JPanel {

        private MainPanel() {
            super(new BorderLayout());
            ReDoSDetectorTab redosTab = new ReDoSDetectorTab();
            ReDoSOption option = new ReDoSOption();
            redosTab.setOption(option);
            this.add(redosTab, BorderLayout.CENTER);
            setPreferredSize(new Dimension(800, 800));
        }

        private static void createAndShowGui() {
            try {
                UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
            } catch (UnsupportedLookAndFeelException ignored) {
                Toolkit.getDefaultToolkit().beep();
            } catch (ClassNotFoundException | InstantiationException | IllegalAccessException ex) {
                logger.log(Level.SEVERE, ex.getMessage(), ex);
                return;
            }
            JFrame frame = new JFrame("ReDoS");
            frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
            frame.getContentPane().add(new MainPanel());
            frame.pack();
            frame.setLocationRelativeTo(null);
            frame.setVisible(true);
        }
    }

}
